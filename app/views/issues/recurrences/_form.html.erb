<div id='recurrence-errors'>
  <%= nameless_error_messages_for 'recurrence' %>
</div>

<%= form_for @recurrence, as: :recurrence, remote: true,
  html: {id: 'recurrence-form'} do |f| %>

  <p>
    <%= f.select :creation_mode, creation_mode_options -%>
    <%= t '.issue' -%>
    <%= f.select :include_subtasks, include_subtasks_options -%>
    <%= t '.every' -%>
    <%= f.number_field :multiplier, min: 1, step: 1, value: 1, size: 3 -%>
    <%= f.select :mode, mode_options -%>
    <%= t '.based_on' -%>
    <%= f.select :anchor_to_start, anchor_to_start_options,
      disabled: anchor_to_start_disabled -%>
    <%= f.select :anchor_mode, anchor_mode_options -%>
    <%= f.date_field :anchor_date, value: Date.current -%>
    <span id='recurrence_delay'><%= t '.delayed_by' -%></span>
    <%= f.number_field :delay_multiplier, min: 0, step: 1, value: 0, size: 3 -%>
    <%= f.select :delay_mode, delay_mode_options -%>
    <%= t '.until' -%>
    <%= select_tag :recurrence_limit_mode, options_for_select(limit_mode_options) -%>
    <%= f.date_field :date_limit, disabled: true, min: Date.current,
      value: Date.current.next_month -%>
    <%= f.number_field :count_limit, disabled: true, min: 1, step: 1, value: 1, size: 3 -%>
    <%= '.' -%>
  </p>

  <p>
    <%= submit_tag l(:button_submit) -%>
    <%= link_to_function l(:button_cancel), '$("#new-recurrence").empty();' -%>
  </p>
<% end %>

<%= javascript_tag do %>
  function creationModeChange() {
    $('#recurrence_anchor_mode option')
      .filter('[value="first_issue_fixed"],[value="last_issue_fixed"]')
      .prop('disabled',
            $('#recurrence_creation_mode option[value="reopen"]').prop('selected') ||
            <%= (@issue.start_date || @issue.due_date).blank? ? 'true' : 'false' %>
           )
    $('#recurrence_anchor_mode option:selected:disabled').prop('selected', false);

    $('#recurrence_include_subtasks option').filter('[value="false"]')
      .prop('disabled',
            $('#recurrence_creation_mode option[value="reopen"]').prop('selected') &&
            <%= @issue.dates_derived? ? 'true' : 'false' %>
           )
    $('#recurrence_include_subtasks option:selected:disabled').prop('selected', false);

    anchorModeChange();
  }
  $('#recurrence-form').on('click', '#recurrence_creation_mode', creationModeChange);

  function anchorModeChange() {
    if ( $('#recurrence_anchor_mode option:selected').val().includes('_flexible') ) {
      $('[id^=recurrence_delay]').prop('disabled', true).fadeOut(250);
    } else {
      $('[id^=recurrence_delay]').prop('disabled', false).fadeIn(250);
    }
    if ( $('#recurrence_anchor_mode option:selected').val() == 'date_fixed_after_close' ) {
      $('#recurrence_anchor_date').prop('disabled', false).fadeIn(250);
    } else {
      $('#recurrence_anchor_date').prop('disabled', true).fadeOut(250);
    }
  }
  $('#recurrence-form').on('click', '#recurrence_anchor_mode', anchorModeChange);

  function limitModeChange() {
    if ( $('#recurrence_limit_mode option:selected').val() == 'forever' ) {
      $('[id$=_limit]').prop('disabled', true).fadeOut(250);
    }
    if ( $('#recurrence_limit_mode option:selected').val() == 'date_limit' ) {
      $('[id$=_count_limit]').prop('disabled', true).hide();
      $('[id$=_date_limit]').prop('disabled', false).fadeIn(250);
    }
    if ( $('#recurrence_limit_mode option:selected').val() == 'count_limit' ) {
      $('[id$=_date_limit]').prop('disabled', true).hide();
      $('[id$=_count_limit]').prop('disabled', false).fadeIn(250);
    }
  }
  $('#recurrence-form').on('click', '#recurrence_limit_mode', limitModeChange);

  $(document).ready(function() {
    creationModeChange();
    anchorModeChange();
    limitModeChange();
  });
<% end %>
